generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}

model User {
  id                         Int        @id @default(autoincrement())
  firstName                  String
  lastName                   String
  username                   String     @unique @db.VarChar(255)
  email                      String     @unique
  password                   String
  bio                        String?
  isSeller                   Boolean    @default(false)
  isAdmin                    Boolean    @default(false)
  profilePicture             String?
  address                    String?
  phoneNumber                String?
  createdAt                  DateTime   @default(now())
  updatedAt                  DateTime   @updatedAt
  products                   Product[]  @relation("UserProducts")
  orders                     Order[]
  cartItems                  CartItem[]
  reviews                    Review[]
  resetToken                 String?
  resetTokenExpiresAt        DateTime?
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int         @default(0)
  categoryId  Int
  category    Category    @relation(fields: [categoryId], references: [id])
  sellerId    Int
  seller      User        @relation("UserProducts", fields: [sellerId], references: [id])
  images      Image[]
  reviews     Review[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]
  CartItem    CartItem[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  products    Product[]
}

model Image {
  id        Int     @id @default(autoincrement())
  url       String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  user       User        @relation(fields: [userId], references: [id])
  totalPrice Float
  status     String
  payment    Payment? // Adjusted relation
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)
  price     Float
}

model Payment {
  id            Int      @id @default(autoincrement())
  orderId       Int      @unique
  order         Order    @relation(fields: [orderId], references: [id])
  paymentMethod String
  paymentStatus String
  transactionId String?
  amount        Float
  createdAt     DateTime @default(now())
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
